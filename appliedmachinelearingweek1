import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from matplotlib import cm
## now lets store the dataset into a varaible named frui
fruits = pd.read_table('fruit_data_with_colors.txt')

fruits.head() ## by defaults prints the first 5 rows
lookup_fruit_name = dict(zip(fruits.fruit_label.unique(), fruits.fruit_name.unique()))    # lets get the unique value for names and labels

lookup_fruit_name

X = fruits[["mass","width","height",'color_score']] ## features
y = fruits["fruit_label"] #labels
#train and test split
X_train,X_test,y_train,y_test = train_test_split(X,y,random_state = 0)
## lets first visualize our data before we train and test it

cmap = cm.get_cmap('gnuplot')

scatter = pd.plotting.scatter_matrix(X_train, c= y_train, marker = 'o', s=40, hist_kwds={'bins':15}, figsize=(9,9), cmap=cmap)


# plotting a 3D scatter plot
from mpl_toolkits.mplot3d import Axes3D

fig = plt.figure()
ax = fig.add_subplot(111, projection = '3d')
ax.scatter(X_train['width'], X_train['height'], X_train['color_score'], c = y_train, marker = 'o', s=100)
ax.set_xlabel('width')
ax.set_ylabel('height')
ax.set_zlabel('color_score')
plt.show()

### Create classifier object

#lets import the library for the knn algorithim
from sklearn.neighbors import KNeighborsClassifier
knn = KNeighborsClassifier(n_neighbors=5)

### Train the classifier(fit the estimator) using the training data

knn.fit(X_train,y_train)

## now lets calculate the accuracy of the knn algorithim we are using

knn.score(X_test,y_test)

### Use the trained k-NN classifier model to classify new, previously unseen objects

## now lets try to predict a fruit with its values
fruit_predictions = knn.predict([[20,4.3,5.5,6]])
lookup_fruit_name[fruit_predictions[0]]

### Plot the decision boundaries of the k-NN classifier

#'from adspy_shared_utilities import plot_fruit_knn

#'plot_fruit_knn(X_train, y_train, 5, 'uniform')   # we choose 5 nearest neighbors

### How sensitive is k-NN classification accuracy to the choice of the 'k' parameter?

k_range = range(1,20)
scores = []

for k in k_range:
    knn = KNeighborsClassifier(n_neighbors = k)
    knn.fit(X_train, y_train)
    scores.append(knn.score(X_test, y_test))

plt.figure()
plt.xlabel('k')
plt.ylabel('accuracy')
plt.scatter(k_range, scores)
plt.xticks([0,5,10,15,20]);

### How sensitive is k-NN classification accuracy to the train/test split proportion?

t = [0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2]

knn = KNeighborsClassifier(n_neighbors = 5)

plt.figure()

for s in t:

    scores = []
    for i in range(1,1000):
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 1-s)
        knn.fit(X_train, y_train)
        scores.append(knn.score(X_test, y_test))
    plt.plot(s, np.mean(scores), 'bo')

plt.xlabel('Training set proportion (%)')
plt.ylabel('accuracy');

import pandas as pd
import numpy as np
## bow lets import the sklearn datasets
from sklearn.datasets import load_breast_cancer
## i want to store the dataset in a variable named cancer
cancer  = load_breast_cancer()
#lets print the description of the datasets
print(cancer.DESCR)

cancer.keys()

# You should write your whole answer within the function provided. The autograder will call
# this function and compare the return value against the correct solution value
def answer_zero():
    # This function returns the number of features of the breast cancer dataset, which is an integer. 
    # The assignment question description will tell you the general format the autograder is expecting
    return len(cancer['feature_names'])

# You can examine what your function returns by calling it in the cell. If you have questions
# about the assignment formats, check out the discussion forums for any FAQs
answer_zero() 

def answer_one():
    
    # Your code here
    index =pd.RangeIndex(start=0, stop=569, step=1)
    
    dataset=pd.DataFrame(data= np.c_[cancer['data']],columns= cancer['feature_names'])
    dataset['target'] = cancer['target']
                        
    
    return dataset


answer_one()

def answer_two():
    cancerdf = answer_one()
    
    
    # Your code here
    index = ['malignant', 'benign']
    
    # Select data where target equals 1.0 and 0.0 for each malignant and bening values
    malignants = np.where(cancerdf['target'] == 0.0);
    benings = np.where(cancerdf['target'] == 1.0);
    
    # Get sizes and build a matrice
    data = [np.size(malignants), np.size(benings)]
    print(data)
    
    # Construct a series object
    series = pd.Series(data, index=index)
    
    # Your code here
    
    return series


answer_two()

def answer_three():
    cancerdf = answer_one()
    ## To solve this one we have to use target as label
    
    # Your code here
    X = cancerdf.drop('target',axis=1) ## so this includes all the features except target
    y = cancerdf.get('target') ## this is only target
    
    return X, y
answer_three()

from sklearn.model_selection import train_test_split

def answer_four():
    X, y = answer_three()
    
    # Your code here
    X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0)
    
    return X_train, X_test, y_train, y_test
answer_four()

from sklearn.neighbors import KNeighborsClassifier

def answer_five():
    X_train, X_test, y_train, y_test = answer_four()
    
    # Your code here
    knn =  KNeighborsClassifier(n_neighbors=1)
    knn.fit(X_train,y_train)
    #knn.score(X_test,y_test)
    
    return knn
answer_five()

def answer_six():
    cancerdf = answer_one()
    means = cancerdf.mean()[:-1].values.reshape(1, -1)
    
    # Your code here
    knn = answer_five()
    
    return knn.predict(means) # Return your answer


def answer_seven():
    X_train, X_test, y_train, y_test = answer_four()
    knn = answer_five()
    
    # Your code here
    test_prediction = knn.predict(X_test)
    
    return test_prediction # Return your answer

def answer_eight():
    X_train, X_test, y_train, y_test = answer_four()
    knn = answer_five()
    
    # Your code here
    score = knn.score(X_test,y_test)
    print(score)
    
    return score
answer_eight()


def accuracy_plot():
    import matplotlib.pyplot as plt

    get_ipython().magic('matplotlib notebook')

    X_train, X_test, y_train, y_test = answer_four()

    # Find the training and testing accuracies by target value (i.e. malignant, benign)
    mal_train_X = X_train[y_train==0]
    mal_train_y = y_train[y_train==0]
    ben_train_X = X_train[y_train==1]
    ben_train_y = y_train[y_train==1]

    mal_test_X = X_test[y_test==0]
    mal_test_y = y_test[y_test==0]
    ben_test_X = X_test[y_test==1]
    ben_test_y = y_test[y_test==1]

    knn = answer_five()

    scores = [knn.score(mal_train_X, mal_train_y), knn.score(ben_train_X, ben_train_y), 
              knn.score(mal_test_X, mal_test_y), knn.score(ben_test_X, ben_test_y)]


    plt.figure()

    # Plot the scores as a bar chart
    bars = plt.bar(np.arange(4), scores, color=['#4c72b0','#4c72b0','#55a868','#55a868'])

    # directly label the score onto the bars
    for bar in bars:
        height = bar.get_height()
        plt.gca().text(bar.get_x() + bar.get_width()/2, height*.90, '{0:.{1}f}'.format(height, 2), 
                     ha='center', color='w', fontsize=11)

    # remove all the ticks (both axes), and tick labels on the Y axis
    plt.tick_params(top='off', bottom='off', left='off', right='off', labelleft='off', labelbottom='on')

    # remove the frame of the chart
    for spine in plt.gca().spines.values():
        spine.set_visible(False)

    plt.xticks([0,1,2,3], ['Malignant\nTraining', 'Benign\nTraining', 'Malignant\nTest', 'Benign\nTest'], alpha=0.8);
    plt.title('Training and Test Accuracies for Malignant and Benign Cells', alpha=0.8)
accuracy_plot()

